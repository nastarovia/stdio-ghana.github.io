<!doctype html>
<html>
<head>
  <title>STDIO Ghana</title>
<link href='/assets/presentation-1d6500099eae4181898a0392e4eaa81d.css' rel='stylesheet' type='text/css' />
  <script type="text/javascript" src="http://stdio-ghana.github.io/js/head.min.js"></script>
  <script type="text/javascript" src="http://stdio-ghana.github.io/js/reveal.min.js"></script>
</head>
<body>
<div class="reveal"><div class="slides">
<section>
<h2></h2>


</section>

<section>this is index.html
	<h3>Software Engineering Reuse</h3>
	<h5>Prerequisites: Object Oriented Programming</h5>
	<dt>Jonathon Parker</dt><dd>Employed at iBASEt</dd>
	<dt>Dane Brown</dt><dd>Professor of Practice, USNA</dd>
</section>
<section>

Why Reuse?

When you sit down to write a module of code, there is a very strong probability that you are
NOT the first person in the world to need that module.  In most of these cases, the functionality
you need has already been written and available for you to use.  This saves you time and the
module usually has been rigorously tested for errors.

</section>
<section>
Types of Reuse

Libraries – The programming language authors or a third party has built the functionality into
the language or a module of code you can reference.

Code Reuse – A module of code written by you or a member on your team can be reused with little
or no modification to solve a new problem.

Pattern Reuse – The type of problem you are trying to solve has been solved before.  The strategy
used to solve it can be reused and implemented in any programming language.
</section>
<section>

The phrase that comes to mind for this situation is:

DON’T REINVENT THE WHEEL!

</section>
<section>

Libraries

Python Standard Library – This library comes with every release of Python.  There are so many
modules we could spend a full 2 weeks getting familiar with them.  A non-exhaustive list includes packages for:

 - Strings
 - Data types
 - Mathematics
 - Operating System interaction
 - File System interaction
 - Data Archiving and Persistence
 - Communications (especially Internet protocols)
 - And much, much more!

	
</section>
<section>

Example:  You need to calculate absolute values of numbers in your code module.  Are you going to write
a function to do that from scratch?  Are you the first software engineer to need an absolute value?
Of course not!  This functionality exists in the appropriately titled “math” package.

The math module documentation provides the following information:

```
math.fabs(x)
Return the absolute value of x.
```

Which you access by importing the module by typing the important statement in the header of your Python script
and later in your code call fabs with:

```
import math
...
y = math.fabs(x)
```

</section>
<section>


Python Package Index (PyPI) – While the Python Standard Library is rich, it does not include every
possible need.  Generous individuals, groups and institutions have created and made public packages
of modules designed to work with Python.  There are more than 40,000 Python packages in PyPI!  There
are additional Python packages that are not included in PyPI.  We will not cover all of these today.
Before you write a module of code, I recommend you browse PyPI
https://pypi.python.org/pypi?:action=browse and search the internet for pre-existing implementations.

	
</section>
<section>

In order to download and install other modules or packages, you need to install the “pip” program.
Instructions on the website walk you through it.

Picking a good package is a challenge.  You may have many to choose from and their quality and features
will vary.  Do research and test before you commit to develop code with a particular package.

	
</section>
<section>

About Frameworks: Some packages you see are “Frameworks”.  A framework is different than a typical package.
What is a Framework?

A framework is a package with a set of functions for a particular task.  A framework hides low level
details of the functions which typically speeds development time and improves readability.  We will
not explore Frameworks further in this course.

The best known Framework for Python is called Django.  It is used to create web applications.

</section>
<section>

Code Reuse:

You or someone in your organization wrote code in the past that is applicable to a current requirement.
So it is an easy task to reuse this code, right?

	
</section>
<section>

WRONG!

</section>
<section>


Code reuse is a very challenging proposition for organizations.  Why?  The basic concept is that code
is written to solve particular business problems under a tight deadline.  Code reuse runs into the
following types of challenges.

</section>
<section>

a. Organization. A package intended for reuse must be fully featured and meet the needs of the whole
organization.  This requires planning and strong support from management.

</section>
<section>

b. Economics.  A code reuse strategy requires additional work.  The time and funding to package code
for reuse may not be available.
</section>
<section>
c. Administration.  Code to be reused must be available in a central location, maintained, documented
and its existence communicated to the entire work force.
</section>
<section>
d. Politics.  Some organizations have hostile internal politics and use of code written by other work
groups might be resisted due to the loss of control of a project.
</section>
<section>
e. Psychology.  For a variety of reasons, individual developers may resent using key components for
their project that they did not write.
</section>
<section>

If your organization has the leadership to overcome these issues, great!  You are very lucky and your
development will be eased.  Because code reuse is a difficult proposition, this rarely happens.

Thus code is typically reused in an ad hoc fashion, obtained from developers in your local work group.
So before you code, ask around.  In this case, the source is typically copied to the new project and
modified and retested.

	
</section>
<section>

Design Patterns:  The purpose of software is to solve problems!  If code you need to solve a problem
has been written before, surely the problem has been solved before.  Or at least a piece of the problem…
</section>
<section>

What is a Design Pattern?

-	A general solution to a problem.  
-	Can be implemented in (almost) any language.

The original and famous Design Patterns book (Design Patterns: Elements of Reusable Object-Oriented
Software) contained 23 patterns, with additional ones identified since.  I will briefly cover 2 example
patterns today.
</section>
<section>

The Factory Pattern

The factory pattern creates objects that inherit from an abstract class.  The actual subclass is not
decided until runtime.  As long as the subclasses implement the required interface(s), they can be handled
identically by the rest of the program while retaining the characteristics of the subclass.

Example: An audio editing program that needs to handle different audio formats with the same set of functions.
So regardless of the audio type (.au, .wav, .mp3, etc.), you can get a generic audio object that can be
handled by the program in the same way.
</section>
<section>

Strategy Pattern.

The strategy pattern allows the behavior of an function to be changeable at runtime.  This is done by
defining a common interface that a family of functions implements.  As the state of the program or an
object changes, its function implementation can be changed appropriately 

Example: Combat video game where shooter changes weapons.  The same function dude.shoot() is called,
but the behavior is different.
</section>
<section>

The use of Design Patterns is controversial for two main reasons.
 - The Design Pattern is needed to correct a flaw in the programming language.
 - Design Patterns can be misused and unnecessarily increase complexity of the code.
 
</section>
<section>


Exercise:

Use code module, libraries and a design pattern to solve a programming problem.

</section>

</div></div>
<script>
	// Full list of configuration options available here:
	// https://github.com/hakimel/reveal.js#configuration
	Reveal.initialize({
		controls: true,
		progress: true,
		history: true,
		center: true,

		theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
		transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none

		// Parallax scrolling
		// parallaxBackgroundImage: 'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg',
		// parallaxBackgroundSize: '2100px 900px',

		// Optional libraries used to extend on reveal.js
		dependencies: [
			{ src: 'http://stdio-ghana.github.io/js/classList.js', condition: function() { return !document.body.classList; } },
	//		{ src: 'http://stdio-ghana.github.io/js/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
	//		{ src: 'http://stdio-ghana.github.io/js/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
	//		{ src: 'http://stdio-ghana.github.io/js/highlight/pack.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
	//		{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
			{ src: 'http://stdio-ghana.github.io/js/notes.js', async: true, condition: function() { return !!document.body.classList; } }
		]
	});
</script>
</body>
</html>

